% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregateChirpsTS.R
\name{aggregateChirpsTS}
\alias{aggregateChirpsTS}
\title{Aggregate Chirps Time Series by year, month}
\usage{
aggregateChirpsTS(
  chirpsStack,
  month,
  inicialYear,
  finalYear,
  fun,
  group_by,
  cores = NULL
)
}
\arguments{
\item{chirpsStack}{spatRaster. spatRaster stack with chirps daily chirps data (output from \code{\link[=downloadChirpsRainfall]{downloadChirpsRainfall()}})}

\item{month}{numeric; indicates the month when the water year begins. The default is
1 (use civil year).}

\item{inicialYear}{numeric; filters the time series to begin on this year (inclusive).
If you choose to use water year instead of civil year, e.g., month = 6,
the first observation used is from the date "01-06-\code{inicialYear}".}

\item{finalYear}{numeric; filters the time series to end on this year (inclusive).
If you choose to use water year instead of civil year, e.g., month = 6,
the last observation used is from the date "31-05-\code{finalYear}".}

\item{fun}{function to be applied. The following functions have been are implemented "sum", "mean", "median", "modal", "which", "which.min", "which.max", "min", "max", "prod", "any", "all", "sd", "std", "first".}

\item{group_by}{character. One of the following values: "years", "months", "yearmonths" which daily data will be grouped.}

\item{cores}{positive integer. cores to be used for a 'parallel' processing.}
}
\value{
spatRaster object with aggregated rainfall data.
}
\description{
Aggregate Chirps Rainfall Times Series by year, month or yearmonth
}
\examples{

\dontrun{

require(terra)

area_of_interest = vect("./paracatu.shp")


downloadChirpsRainfall(dir_out = "./temp/chirpsRainfall",
                    years = c(1990:2019),
                   aoi = area_of_interest)


chirpsStackAoi= list.files("./temp/chirpsRainfall", full.names = T) \%>\%
terra::rast()


#Annual mean rainfall
chirpsYear = aggregateChirpsTS(chirpsStack = chirpsStackAoi,
month = 11,
inicialYear = 1990,
finalYear = 2019,
fun = "sum",
group_by = "years",
cores = 23)


}


}
